@model Web.ViewModels.CompanyFilterViewModel

@{
    ViewData["Title"] = "Companies";

    var tableId = Guid.NewGuid();

    var listUrl = Url.RouteUrl("GetCompanies");
    var deleteUrl = Url.RouteUrl("DeleteCompanies");
    var editUrl = Url.RouteUrl("EditCompany");
    var detailsUrl = Url.RouteUrl("DetailsCompany");
}

@section RightSidebar {
    <div class="ui stacked secondary yellow segment">
        <form id="table-filter" class="ui form">
            <h3>Filters</h3>
            <div class="field">
                <label asp-for="CEOId"></label>
                <select asp-for="CEOId" asp-items="@ViewBag.Ceo" class="ui search dropdown">
                    <option value="" selected>Select CEO</option>
                </select>
            </div>
        </form>
    </div>

    <div class="ui sticky">
        <div id="displayContainer"></div>
    </div>
}

<div>
    @if(User.IsInRole("Administrator")) {
        <div id="toolbar" class="ui secondary menu">
            <a asp-route="AddCompany" class="ui button" data-request="ajax" rel="dialog" data-title="Create new company"><i class="fa fa-plus mr-1"></i> Create</a>
            <div class="right menu">
                <button class="red ui button" data-action="delete" disabled><i class="trash icon"></i> Delete</button>
            </div>
        </div>
    }

    <table id="@(tableId)" class="ui selectable celled unstackable orange table" data-toolbar="#toolbar"></table>
</div>

@section Scripts {
    <script type="text/javascript">
        function onSectionCreateClick (e, jqXHR, status) {
            if(status === 'success') {
                const data = jqXHR.responseJSON;
                if (data && data.fields) {
                    const { id, name, fields } = data;
                    const $link = $(e.target);
                    const $target = $($link.data('target'));
                    const generatedFields = $.fn.generateFields(fields, "Sections[][Fields]");
                    const groupFields = $.fn.generateGroup(id, name, generatedFields, "Sections");

                    $target.append(groupFields);
                }
            }
        }

        function onSectionDeleteClick(e, jqXHR, status) {
            if(status === 'success') {
                var link = $(e.target);
                var target = $(link.data('target')).remove();
                window.DocumentController.reload(false);
            }
        }

        function onDeleteCompanyDataClick(e, jqXHR, status) {
            if (status === 'success') {
                const $link = $(e.target);
                const $rootRow = $(`[data-label=${$link.data("root")}]`);
                const $allRows = $rootRow.find("td[data-label=Data] table tbody");
                const numberOfChildrens = $allRows.children().length;

                if (!numberOfChildrens || numberOfChildrens <= 1) {
                    $rootRow.remove();
                } else {
                    $($link.data('target')).remove();
                }
            }
        }

        function ajaxSubmitComplete(e, jqXHR, status) {
            if (status === 'success') {
                if (jqXHR.responseJSON.message) {
                    $.fn.message(jqXHR.responseJSON);
                }
                window.DocumentController.reload(false);
                window.dialog.modal('hide');
            }
        };

        function onCreateCompanyDataSubmit(e, jqXHR, status) {
            if (status === 'success') {
                var data = jqXHR.responseJSON;
                $.get('@detailsUrl', { 'id': data.id }).done(result => {
                    $('#displayContainer').html(result).find("a[data-request=ajax]").ajaxClick();

                    window.dialog.modal('hide');
                });
            }
        }

        $(document).ready(function () {
            window.DocumentController = new DocumentController({
                'table': '#@tableId',
                'controller': {
                    'list': '@listUrl',
                    'delete': '@deleteUrl'
                },
                'columns': [
                    { 'title': '', 'data': 'id', 'className': 'collapsing', 'render': (data, type, row) => $.fn.renderDatatableAction(data, type, row) },
                    { 'title': 'Name', 'data': 'name' },
                    { 'title': 'CEO', 'data': 'ceoName' },
                    { 'title': 'EIN', 'data': 'ein' },
                    { 'title': 'DB', 'data': 'db' },
                    { 'title': 'Founded', 'className': 'collapsing', 'data': 'founded', 'render': (data, type, row) => $.fn.formatDate(data, type, row) },
                    { 'title': 'Modified', 'className': 'collapsing', 'data': 'updatedDate', 'render': (data, type, row) => $.fn.formatDate(data, type, row) }
                ],
                'onRowClick': (e, data) => {
                    if (e.target.tagName !== 'INPUT' && e.target.tagName !== 'A') {
                       $.get('@detailsUrl', { 'id': data.id }).done(result => {
                            $('#displayContainer').html(result).find("a[data-request=ajax]").ajaxClick();
                        });
                    }
                },
                'onDblRowClick': (e, data) => {
                    $.get('@editUrl', { 'id': data.id }).done(result => {
                        $(result).dialog({ 'title': 'Edit company' });
                    });
                }
            });
        });
    </script>
}