@model Web.ViewModels.UccountFilterViewModel
@{
    ViewData["Title"] = "Accounts";

    var tableId = Guid.NewGuid();

    var listUrl = Url.RouteUrl("GetUccounts");
    var deleteUrl = Url.RouteUrl("DeleteUccounts");
    var editUrl = Url.RouteUrl("EditUccount");
    var detailsUrl = Url.RouteUrl("DetailsUccount");

    var vendorUrl = Url.RouteUrl("GetVendor");
    var vendorCategoryUrl = Url.RouteUrl("GetVendorCategory");
    var vendorCategoriesUrl = Url.RouteUrl("GetVendorCategories");
}

@section RightSidebar {
    <div class="ui stacked secondary yellow segment">
        <form id="table-filter" class="ui form">
            <h3>Filters</h3>
            <div class="field">
                <label asp-for="Kind"></label>
                <select asp-for="Kind" asp-items="@Html.GetEnumSelectList<Core.Data.Enums.UccountTypes>()" class="ui dropdown">
                    <option value="" selected>Select account type</option>
                </select>
            </div>
            <div class="field">
                <label asp-for="VendorId"></label>
                <select asp-for="VendorId" asp-items="@ViewBag.Vendors" class="ui dropdown">
                    <option value="" selected>Select vendor</option>
                </select>
            </div>
            <div class="field">
                <label asp-for="CustomerId"></label>
                <select asp-for="CustomerId" asp-items="@ViewBag.Customers" data-clearable="true" class="ui dropdown">
                    <option value="" selected>Select customers</option>
                </select>
            </div>
        </form>
    </div>
}
<div class="ui shape full-width">
    <div class="sides">
        <div class="active side main">
            <div id="toolbar" class="flex justify-content-between">
                <div class="ui buttons">
                    <a class="ui button" asp-action="AddUccount" asp-route-kind="0" data-request="ajax" rel="dialog" data-title="Create business account">Bussines</a>
                    <div class="or"></div>
                    <a class="ui button" asp-action="AddUccount" asp-route-kind="1" data-request="ajax" rel="dialog" data-title="Create personal account">Personal</a>
                </div>

                <button class="red ui button" data-action="delete" disabled><i class="trash icon"></i> Delete</button>
            </div>
            <table id="@(tableId)" class="ui selectable celled unstackable orange table" data-toolbar="#toolbar"></table>
        </div>
        <div class="side details">
            <div class="ui grid">
                <div class="row">
                    <div class="column">
                        <button class="ui button" data-target=".side.main"><i class="retweet icon"></i> Back</button>
                    </div>
                </div>
                <div class="row">
                    <div class="column">
                        <div id="@(tableId)_details"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        //when form submit
        ajaxSubmitComplete = function (e, jqXHR, status) {
            if (status === 'success') {
                window.DocumentController.reload(false);
                window.dialog.modal('hide');
            }
        };

        //fired when form changed
        ajaxSubmitOnChange = function (e) {
            var $form = $(e.currentTarget);
            var $vendorField = $form.find('select#VendorId').closest('.field');
            var $groups = $form.find('div[data-group]');

            $groups.each((index, element) => {
                var $group = $(element);
                if ($group.find('.fields').length === 0) {
                    $group.remove();
                }
            }).promise().done(() => {
                $form.find('div[data-group]').length ? $vendorField.disabled() : $vendorField.enabled();
            });
        }

        displayPasswordOnClick = function(e, jqXHR, status) {
            if (status === 'success') {
                $(e.target).text(jqXHR.responseText);
            }
        }

        onListFieldAdd = function(e, _, status) {
            if (status === 'success') {
                const $target = $(e.target);
                const data = $(e.target).data();
                const $parent = $target.closest("div[data-container='group']");
                const btnAttrs = { "data-request": "ajax", rel: "onListFieldDelete" };
                const $field = $($.fn.addListFields("", "", Boolean(data.required), { type: 0, attrs: btnAttrs }));

                $field.find('a[data-request=ajax]').ajaxClick();

                $parent.append($field);
            }
        }

        onListFieldDelete = function(e, _, status) {
            if (status === 'success') {
                const $target = $(e.target);
                const $parent = $target.closest(".two.fields");

                $parent.remove()
            }
        }

        extendListFieldsWithOptions = function(arr) {
            return arr.map((field, i) => {
                if (field.htmlTypeName === "list") {
                    field["items"] =  [{
                        key: "",
                        value: "",
                        btnOptions: {
                            type: i === 0 ? 1 : 0,
                            attrs: {
                                "data-request": "ajax",
                                "data-required": field.isRequired,
                                rel: "onListFieldAdd" 
                            }
                        }
                    }];
                }

                return field;
            });
        }

        sDropdownOnChange = function (e, value, text) {
            if (e.target.tagName === 'SELECT' && e.target.id === 'VendorId') {
                var $target = $(e.target);
                var dataTarget = $target.data('target');
                var dataCategory = $target.data('category');

                if (typeof dataTarget === typeof undefined || typeof dataCategory === typeof undefined)
                    return;

                var $fieldsContainer = $(dataTarget);
                var $categoryContainer = $(dataCategory);

                if (value.length > 0) {
                    $.when(
                        $.get('@vendorCategoriesUrl', { 'id': value }),
                        $.get('@vendorUrl', { 'id': value })
                    ).done((categories, vendor) => {
                        if (categories[1] === 'success') {
                            var $generatedMenuItems = categories[0].map(item => (
                                `<a 
                                    id='${item.id}' 
                                    data-request='ajax' 
                                    rel='onCreateServiceClick' 
                                    class='item' 
                                    href='@(vendorCategoryUrl)?id=${item.id}' 
                                    data-target='#servicesContainer'>
                                    ${item.name}
                                </a>`));
                            $categoryContainer.html($generatedMenuItems).find('a[data-request=ajax]').ajaxClick();
                        }

                        if (vendor[1] === 'success') {
                            const fieldsListType = vendor[0].fields.filter(field => field.htmlTypeName === "list");
                            const extendedListType = extendListFieldsWithOptions(fieldsListType);
                            const fieldsOtherTypes = vendor[0].fields.filter(field => field.htmlTypeName !== "list");
                            const $fields = $($.fn.fieldsElement(fieldsOtherTypes, "Fields", true));
                            const $fieldsLists = $($.fn.fieldsElement(extendedListType, "Fields", true));
                            
                            $fieldsLists.find('a[data-request=ajax]').ajaxClick();

                            $fieldsContainer.html($fields);
                            $fieldsContainer.siblings("#lists").html($fieldsLists);
                        }
                    });
                } else {
                    $categoryContainer.empty();
                    $fieldsContainer.empty();
                }
            }
        }

        onCreateServiceClick = function(e, jqXHR, status) {
            if (status === 'success') {
                const $target = $(e.currentTarget);
                const data = jqXHR.responseJSON;
                if (data && data.fields) {
                    const { categoryId, name, fields } = data;
                    const extendedFields = extendListFieldsWithOptions(fields);
                    const $form = $target.parents('form');
                    const $container = $($target.data('target'));

                    const fieldsGroup = $.fn.fieldsGroupElement(categoryId, name, extendedFields, "Services", false, { 'rel': 'onDeleteServiceClick' });

                    var $segment = $form.find(`div[data-group=${categoryId}]`);
                    if (!$segment.length) {
                        $segment = $.fn.segmentElement(categoryId, name, fieldsGroup);
                        $container.append($segment);
                    } else {
                        $segment.append(fieldsGroup);
                    }

                    $container.find('a[data-request=ajax]').ajaxClick();
                    $form.trigger($.Event("change", {target: e.target}));
                }
            }
        }

        onDeleteServiceClick = function(e, jqXHR, status) {
            if (status === 'success') {
                const $link = $(e.target);
                const $form = $link.parents("form");
                $link.parents('.fields').remove();

                $form.trigger($.Event("change", { target: e.target }));
                window.DocumentController.reload(false);
            }
        }

        $(document).ready(function () {
            window.DocumentController = new DocumentController({
                'table': '#@tableId',
                'controller': {
                    'list': '@listUrl',
                    'delete': '@deleteUrl'
                },
                'columns': [
                    { 'title': '', 'data': 'id', 'className': 'collapsing', 'render': (data, type, row) => $.fn.renderDatatableAction(data, type, row) },
                    { 'title': 'Vendor', 'className': 'collapsing', 'data': 'vendorName' },
                    { 'title': 'Customer', 'data': 'name', 'render': (data, type, row) => { return `<span>${data}<br/>${row.kind}</span>` } },
                    { 'title': 'Modified', 'className': 'collapsing', 'data': 'updatedDate', 'render': (data, type, row) => $.fn.formatDate(data, type, row) },
                    { 'title': 'Services', 'className': 'collapsing', 'data': 'serviceCount' },
                    {
                      'title': 'Action', 'data': 'id', 'className': 'collapsing', 'render': (data, type, row) => {
                        return `<a class='ui icon' data-request='ajax' href='@(editUrl)?id=${data}' rel='dialog' data-title='Edit Account'>
                                  <i class="pencil icon"></i>
                                </a>`;
                        }
                    }
                ],
                'onRowCreated': function (row, data, index) {
                    $(row).addClass(data.isActive ? 'grey' : '');
                },
                'onRowClick': (e, data) => { },
                'onDblRowClick': (e, data) => {
                   $.get('@detailsUrl', { 'id': data.id }).done(result => {
                       $('#@(tableId)_details').html(result).find('a[data-request=ajax]').ajaxClick();
                       $('.shape').shape('set next side', '.side.details').shape('flip over');
                    });
                }
            });
        })
    </script>
}
