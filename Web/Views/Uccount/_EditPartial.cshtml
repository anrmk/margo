@model Web.ViewModels.UccountViewModel
@{

    var formGuid = Guid.NewGuid();
    var vendorContainerFieldsGuid = Guid.NewGuid();
    var vendorContainerCategoryGuid = Guid.NewGuid();
    var serviceContainerGuid = Guid.NewGuid();

    var persons = (List<SelectListItem>)ViewData["Persons"];
    var companies = (List<SelectListItem>)ViewData["Companies"];
    var vendors = (List<SelectListItem>)ViewData["Vendors"];
    var categories = (List<VendorCategoryViewModel>)ViewData["Categories"];
    var services = (List<UccountGroupedServiceViewModel>)ViewData["Services"];
    var fieldsListType = (List<UccountVendorFieldViewModel>)ViewData["FieldsListType"];
    var fieldsOtherType = (List<UccountVendorFieldViewModel>)ViewData["FieldsOtherType"];
    var uccountKind = (int)ViewData["Kind"];
}

<form id="@formGuid" class="ui form" asp-route="UpdateUccount" asp-route-id="@Model.Id" method="put" data-request="ajax">
    <fieldset>
        <input type="hidden" name="Id" value="@Model.Id" />
        <input type="hidden" name="Kind" value="@((int)uccountKind)" />

        <div class="two fields">
            @if(Model.Kind == Core.Data.Enums.UccountTypes.BUSINESS) {
                <div class="field required">
                    <label asp-for="CompanyId"></label>
                    <select class="ui search dropdown" required selected="false" asp-for="CompanyId" asp-items="@companies">
                        <option value="" selected disabled hidden></option>
                    </select>
                </div>
            } else {
                <div class="field required">
                    <label asp-for="PersonId"></label>
                    <select class="ui search dropdown" required asp-for="PersonId" asp-items="@persons">
                        <option value="" selected disabled hidden></option>
                    </select>
                </div>
            }

            <div class="field required @(Model.Services.Count() > 0 ? "disabled" : "")">
                <label asp-for="VendorId"></label>
                <select class="ui search dropdown"
                        required 
                        asp-for="VendorId" 
                        asp-items="@vendors"
                        data-target="#@vendorContainerFieldsGuid" 
                        data-category="#@vendorContainerCategoryGuid">
                    <option value="" selected disabled hidden></option>
                </select>
            </div>
        </div>

        <div class="field">
            <div class="ui slider checkbox">
                <input type="checkbox" name="IsActive" data-value-type="boolean" value="true" @(Model.IsActive ? "checked" : "") />
                <label asp-for="IsActive"></label>
            </div>
        </div>

        <div>
            <div id="@vendorContainerFieldsGuid" class="fields">
                @foreach (var field in Model.Fields) {
                    if (field.Type != Core.Data.Enums.FieldEnum.LIST) {
                        var inputType = field.HTMLTypeName;
                        var inputIsRequired = field.IsRequired ? "required" : "";
                        var inputValue = string.IsNullOrEmpty(field.Value) && (field.HTMLTypeName == "checkbox") ? "1" : field.Value;
                        var inputChecked = field.HTMLTypeName == "checkbox" && field.Value == "1" ? "checked" : "";

                        <div class="field">
                            <label>@field.Name</label>
                            <input type="hidden" name="Fields[][Name]" value="@field.Name">
                            <input type="hidden" name="Fields[][IsRequired]" value="@field.IsRequired" data-value-type="boolean">
                            <input type="hidden" name="Fields[][Type]" value="@((int)field.Type)" data-value-type="number">
                            <input type="hidden" name="Fields[][TypeName]" value="@field.TypeName">
                            <input type="@inputType" 
                                name="Fields[][Value]" 
                                value="@inputValue" 
                                autocomplete="new-password" 
                                placeholder="@field.Name" 
                                @inputIsRequired 
                                @inputChecked 
                                data-value-type="string" />
                        </div>
                    }
                }
            </div>
            <div id="lists">
                @foreach(var field in Model.Fields) {
                    if (field.Type == Core.Data.Enums.FieldEnum.LIST) {
                        var index = 0;
                        var inputIsRequired = field.IsRequired ? "required" : "";
                        var inputGroups = field.Value.Split(";").ToList();
                        var items = new List<string[]>();

                        for (int i = 0; i < inputGroups.Count; i++) 
                        { 
                            var keyValue = inputGroups[i].Split(",");
                            items.Add(keyValue);
                        }

                        <div id="@field.Id" class="field">
                            <input type="hidden" name="Fields[][Name]" value="@field.Name">
                            <input type="hidden" name="Fields[][IsRequired]" value="@field.IsRequired" data-value-type="boolean">
                            <input type="hidden" name="Fields[][Type]" value="@((int)field.Type)" data-value-type="number">
                            <input type="hidden" name="Fields[][TypeName]" value="@field.TypeName">
                            <input type="hidden" name="Fields[][Value]" data-value-type="list">
                            <label>@field.Name</label>
                            <div data-container="group">
                                @foreach (var item in items) {
                                    var id = Guid.NewGuid();

                                    <div id="@(id)_item" class='two fields'>
                                        <div class='six wide field'>
                                            <input name="key"
                                                autocomplete="new-password" 
                                                @inputIsRequired 
                                                placeholder="Key" 
                                                value="@item[0]" 
                                                type="text" 
                                                data-value-type="skip" />
                                        </div>
                                        <div class='six wide field'>
                                            <input name="value"
                                                autocomplete="new-password" 
                                                @inputIsRequired 
                                                placeholder="Value" 
                                                value="@item[1]" 
                                                type="text" 
                                                data-value-type="skip" />
                                        </div>
                                        <div class="one wide field flex align-center justify-center">
                                            @{ 
                                                var itemIsRequired = field.IsRequired ? "true" : "false"; 
                                                var rel = index == 0 ? "onListFieldAdd" : "onListFieldDelete";
                                                var btnClass = index == 0 ? "plus" : "minus";
                                            }

                                            <a class="ui right floated mini icon button"
                                                data-request="ajax"
                                                data-required="@itemIsRequired"
                                                rel="@rel">
                                                <i class="@btnClass icon"></i>
                                            </a>
                                        </div>
                                    </div>

                                    index++;
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="ui right floated dropdown mini icon button" tabindex="0">
            <i class="plus icon"></i>
            <div id="@vendorContainerCategoryGuid" class="left menu">
                @foreach(var category in categories) {
                    <a id="@category.Id" 
                       class="item" 
                       asp-route="GetVendorCategory" 
                       asp-route-id="@category.Id" 
                       data-request="ajax" 
                       rel="onCreateServiceClick" 
                       data-target="#servicesContainer">
                        @category.Name
                    </a>
                }
            </div>
        </div>

        <h4 class="ui dividing header">Services</h4>
        <div id="servicesContainer">
            @foreach(var service in services) {
                <div class="ui orange segment" data-group="@service.CategoryId">
                    <h4 class="ui header" data-label="@service.Name">@service.Name</h4>
                    @foreach(var group in service.Groups) {
                        <div id="@group.Id" class="equal width fields">
                            <input type="hidden" name="Services[][Id]" value="@group.ServiceId" data-value-type="string">
                            <input type="hidden" name="Services[][Name]" value="@group.ServiceName" data-value-type="string">
                            <input type="hidden" name="Services[][CategoryId]" value="@service.CategoryId" data-value-type="string">
                            @foreach(var field in group.Fields) {
                                if (field.Type == Core.Data.Enums.FieldEnum.LIST) {
                                    var index = 0;
                                    var inputIsRequired = field.IsRequired ? "required" : "";
                                    var inputGroups = field.Value.Split(";").ToList();
                                    var items = new List<string[]>();

                                    for (int i = 0; i < inputGroups.Count; i++) 
                                    {
                                        var keyValue = inputGroups[i].Split(",");
                                        items.Add(keyValue);
                                    }

                                    <div id="@field.Id" class="field">
                                        <input type="hidden" name="Services[][Fields][][Name]" value="@field.Name">
                                        <input type="hidden" name="Services[][Fields][][IsRequired]" value="@field.IsRequired" data-value-type="boolean">
                                        <input type="hidden" name="Services[][Fields][][Type]" value="@((int)field.Type)" data-value-type="number">
                                        <input type="hidden" name="Services[][Fields][][TypeName]" value="@field.TypeName">
                                        <input type="hidden" name="Services[][Fields][][Value]" data-value-type="list">
                                        <div data-container="group">
                                            @foreach (var item in items) {
                                                var id = Guid.NewGuid();

                                                <div id="@(id)_item" class='two fields'>
                                                    <div class='six wide field'>
                                                        <input name="key"
                                                            autocomplete="new-password" 
                                                            @inputIsRequired 
                                                            placeholder="Key" 
                                                            value="@item[0]" 
                                                            type="text" 
                                                            data-value-type="skip" />
                                                    </div>
                                                    <div class='six wide field'>
                                                        <input name="value"
                                                            autocomplete="new-password" 
                                                            @inputIsRequired 
                                                            placeholder="Value" 
                                                            value="@item[1]" 
                                                            type="text" 
                                                            data-value-type="skip" />
                                                    </div>
                                                    <div class="one wide field flex align-center justify-center">
                                                        @{ 
                                                            var itemIsRequired = field.IsRequired ? "true" : "false"; 
                                                            var rel = index == 0 ? "onListFieldAdd" : "onListFieldDelete";
                                                            var btnClass = index == 0 ? "plus" : "minus";
                                                        }

                                                        <a class="ui right floated mini icon button"
                                                            data-request="ajax"
                                                            data-required="@itemIsRequired"
                                                            rel="@rel">
                                                            <i class="@btnClass icon"></i>
                                                        </a>
                                                    </div>
                                                </div>

                                                index++;
                                            }
                                        </div>
                                    </div>
                                } else {
                                    var inputType = field.HTMLTypeName;
                                    var inputIsRequired = field.IsRequired ? "required" : "";
                                    var inputValue = string.IsNullOrEmpty(field.Value) && (field.HTMLTypeName == "checkbox") ? "1" : field.Value;
                                    var inputChecked = field.HTMLTypeName == "checkbox" && field.Value == "1" ? "checked" : "";
                                    
                                    <div class="field">
                                        <input type="hidden" name="Services[][Fields][][Name]" value="@field.Name">
                                        <input type="hidden" name="Services[][Fields][][IsRequired]" value="@field.IsRequired" data-value-type="boolean">
                                        <input type="hidden" name="Services[][Fields][][Type]" value="@((int)field.Type)" data-value-type="number">
                                        <input type="hidden" name="Services[][Fields][][TypeName]" value="@field.TypeName">
                                        <input type="@inputType" 
                                            name="Services[][Fields][][Value]" 
                                            value="@inputValue" 
                                            autocomplete="new-password" 
                                            placeholder="@field.Name" 
                                            @inputIsRequired 
                                            @inputChecked 
                                            data-value-type="string" />
                                    </div>
                                }
                            }
                            <div class="one wide field flex align-center justify-center">
                                <a asp-route="DeleteService" 
                                   asp-route-id="@group.ServiceId" 
                                   data-request="ajax" 
                                   rel="onDeleteServiceClick" 
                                   onclick="return confirm('Are you sure want to delete this?')">
                                   delete
                                </a>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </fieldset>
</form>